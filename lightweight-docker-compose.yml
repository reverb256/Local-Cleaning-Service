version: '3.8'

services:
  # Lightweight main application (1vCPU/.5GB target)
  app:
    build:
      context: .
      dockerfile: Dockerfile.lightweight
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=50M
      - /var/cache:size=20M

  # Minimal PostgreSQL for business data only
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: workplace_janitorial
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/lightweight-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c shared_buffers=32MB
      -c effective_cache_size=96MB
      -c maintenance_work_mem=8MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=1MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Lightweight Redis for session management only
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --maxmemory 64mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 80M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Cloudflare Worker Orchestrator (minimal footprint)
  cloudflare-proxy:
    build:
      context: ./cloudflare
      dockerfile: Dockerfile
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - MAIN_APP_URL=http://app:5000
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: wjs-bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/wjs/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/wjs/data/redis