version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - SEARXNG_URL=http://searxng:8080
      - BROWSER_URL=http://browser:3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
      - searxng
      - browser
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    volumes:
      - logs:/app/logs:rw

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: workplace_janitorial
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    sysctls:
      - net.core.somaxconn=1024

  # Redis for Caching and Rate Limiting
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    sysctls:
      - net.core.somaxconn=1024

  # SearxNG for Privacy-Focused Search
  searxng:
    image: searxng/searxng:latest
    environment:
      - SEARXNG_BASE_URL=http://searxng:8080
      - SEARXNG_SECRET=${SEARXNG_SECRET}
    volumes:
      - ./config/searxng:/etc/searxng:ro
      - searxng_data:/var/lib/searxng
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache

  # Headless Browser for Autonomous Operations
  browser:
    build:
      context: ./docker/browser
      dockerfile: Dockerfile
    environment:
      - DISPLAY=:99
      - SCREEN_WIDTH=1920
      - SCREEN_HEIGHT=1080
      - SCREEN_DEPTH=24
    volumes:
      - browser_data:/data
      - ./scripts/browser:/scripts:ro
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    shm_size: 2gb
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

  # Local LLM for Security Proxy
  llm-proxy:
    build:
      context: ./docker/llm
      dockerfile: Dockerfile
    environment:
      - MODEL_PATH=/models/llama-2-7b-chat.gguf
      - MAX_TOKENS=2048
      - TEMPERATURE=0.1
    volumes:
      - llm_models:/models:ro
      - llm_cache:/cache
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Security Scanner
  security-scanner:
    build:
      context: ./docker/security
      dockerfile: Dockerfile
    environment:
      - SCAN_INTERVAL=3600
      - TARGET_URL=http://app:5000
    volumes:
      - security_reports:/reports
      - ./config/security:/config:ro
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Log Aggregation
  fluentd:
    build:
      context: ./docker/fluentd
      dockerfile: Dockerfile
    volumes:
      - logs:/fluentd/log
      - ./config/fluentd:/fluentd/etc:ro
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  searxng_data:
    driver: local
  browser_data:
    driver: local
  llm_models:
    driver: local
  llm_cache:
    driver: local
  security_reports:
    driver: local
  logs:
    driver: local